generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  balance        Decimal @default(0.00) @db.Decimal(10, 2)
  total_incomes  Decimal @default(0.00) @db.Decimal(10, 2)
  total_expenses Decimal @default(0.00) @db.Decimal(10, 2)

  banks    Bank[]
  incomes  Income[]
  expenses Expense[]

  savings              Savings[]
  savings_transactions SavingsTransaction[]

  @@map("users")
}

model Bank {
  id              String  @id @default(uuid())
  name            String
  logo            String
  initial_value   Decimal @db.Decimal(10, 2)
  current_balance Decimal @db.Decimal(10, 2)
  total_incomes   Decimal @default(0.00) @db.Decimal(10, 2)
  total_expenses  Decimal @default(0.00) @db.Decimal(10, 2)

  incomes  Income[]
  expenses Expense[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("banks")
}

model Income {
  id         String   @id @default(uuid())
  name       String
  value      Decimal  @db.Decimal(10, 2)
  type       String
  date       DateTime
  created_at DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  bank   Bank   @relation(fields: [bankId], references: [id], onDelete: Cascade)
  bankId String @map("bank_id")

  @@map("incomes")
}

model Expense {
  id         String   @id @default(uuid())
  name       String
  value      Decimal  @db.Decimal(10, 2)
  type       String
  date       DateTime
  created_at DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  bank   Bank   @relation(fields: [bankId], references: [id], onDelete: Cascade)
  bankId String @map("bank_id")

  @@map("expenses")
}

model Savings {
  id              String  @id @default(uuid())
  goal            Decimal @db.Decimal(10, 2) @default(0.00)
  current_balance Decimal @db.Decimal(10, 2) @default(0.00)

  transactions SavingsTransaction[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("savings")
}

model SavingsTransaction {
  id         String   @id @default(uuid())
  value      Decimal  @db.Decimal(10, 2)
  type       String
  date       DateTime
  created_at DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  savings   Savings @relation(fields: [savingsId], references: [id], onDelete: Cascade)
  savingsId String  @map("savings_id")

  @@map("savings_transactions")
}
